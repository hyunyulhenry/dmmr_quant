---
title: "API를 이용한 데이터 수집"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      warning = FALSE,
                      message = FALSE,
                      out.width = "50%")
```

API 제공자는 본인이 가진 데이터베이스를 다른 누군가가 쉽게 사용할 수 있는 형태로 가지고 있으며, 해당 데이터베이스에 접근할 수 있는 열쇠인 API 주소를 가진 사람은 이를 언제든지 사용할 수 있습니다.

![](images/api/api.png)

API는 API 주소만 가지고 있다면 데이터를 언제, 어디서, 누구나 쉽게 이용할 수 있다는 장점이 있습니다. 또한 대부분의 경우 사용자가 필요한 데이터만을 가지고 있으므로 접속 속도가 빠르며, 데이터를 가공하는 번거로움도 줄어듭니다. 해외에는 금융 데이터를 API의 형태로 제공하는 업체가 많으므로, 이를 잘만 활용한다면 매우 손쉽게 퀀트 투자에 필요한 데이터를 수집할 수 있습니다.

# 야후 파이낸스 이용하기

야후 파이낸스에서는 주가 데이터를 무료로 제공하며, quantmod 패키지의 `getSymbols()` 함수는 해당 API에 접속해 데이터를 다운로드합니다.

## 주가 다운로드

`getSymbols()` 함수의 기본적인 사용법은 매우 간단합니다. 괄호 안에 다운로드하려는 종목의 티커를 입력하면 됩니다.

```{r}
library(quantmod)
getSymbols('AAPL')
```

```{r}
head(AAPL)
```

먼저 `getSymbols()` 함수 내에 애플의 티커인 AAPL을 입력합니다. 티커와 동일한 변수인 AAPL이 생성되며, 주가 데이터가 다운로드된 후 xts 형태로 입력됩니다.

다운로드 결과로 총 6개의 열이 생성됩니다. Open은 시가, High는 고가, Low는 저가, Close는 종가를 의미합니다. 또한 Volume은 거래량을 의미하며, Adjusted는 배당이 반영된 수정주가를 의미합니다. 이 중 가장 많이 사용되는 데이터는 Adjusted, 즉 배당이 반영된 수정주가입니다.

```{r}
chart_Series(Ad(AAPL))
```

`Ad()` 함수를 통해 다운로드한 데이터에서 수정주가만을 선택한 후 `chart_Series()` 함수를 이용해 시계열 그래프를 그릴 수도 있습니다. 시계열 기간을 입력하지 않으면 2007년 1월부터 현재까지의 데이터가 다운로드되며, 입력 변수를 추가해서 원하는 기간의 데이터를 다운로드할 수도 있습니다.

```{r}
data = getSymbols('AAPL',
                  from = '2000-01-01', to = '2018-12-31',
                  auto.assign = FALSE)
head(data)
```

from에는 시작시점을 입력하고 to에는 종료시점을 입력하면 해당 기간의 데이터가 다운로드됩니다.

`getSymbols()` 함수를 통해 다운로드한 데이터는 자동으로 티커와 동일한 변수명에 저장됩니다. 만일 티커명이 아닌 원하는 변수명에 데이터를 저장하려면 auto.assign 인자를 FALSE로 설정해주면 다운로드한 데이터가 원하는 변수에 저장됩니다.

```{r}
ticker = c('META', 'NVDA') 
getSymbols(ticker)
```

```{r}
head(META)
```

```{r}
head(NVDA)
```

한 번에 여러 종목의 주가를 다운로드할 수도 있습니다. 위 예제와 같이 메타와 엔비디아의 티커인 META와 NVDA를 ticker 변수에 입력하고 `getSymbols()` 함수에 티커를 입력한 변수를 넣으면 두 종목의 주가가 순차적으로 다운로드됩니다.

## 국내 종목 주가 다운로드

`getSymbols()` 함수를 이용하면 미국뿐 아니라 국내 종목의 주가도 다운로드할 수 있습니다. 국내 종목의 티커는 총 6자리로 구성되어 있으며, 해당 함수에 입력되는 티커는 코스피 상장 종목의 경우 **티커.KS**, 코스닥 상장 종목의 경우 **티커.KQ**의 형태로 입력해야 합니다.

다음은 코스피 상장 종목인 삼성전자 데이터의 다운로드 예시입니다.

```{r}
getSymbols('005930.KS')
```

```{r}
tail(Ad(`005930.KS`))
```

`Cl()` 함수는 Close, 즉 종가만을 선택하며, 사용 방법은 `Ad()` 함수와 동일합니다. 비록 배당을 고려할 수는 없지만, 전반적으로 오류가 없는 데이터를 사용할 수 있습니다.

다음은 코스닥 상장종목인 셀트리온제약의 예시이며, 티커인 068670에 .KQ를 붙여 함수에 입력합니다. 역시나 데이터가 다운로드되어 티커명의 변수에 저장됩니다.

```{r}
getSymbols("068760.KQ")
```

```{r}
tail(Cl(`068760.KQ`))
```

## SQL에 데이터 저장하기

API나 크롤링을 통해 수집한 데이털르 SQL에 저장해보도록 하겠다. 먼저 SQL에서 다음과 같이 데이터베이스와 주가가 들어갈 테이블을 만든다.

```{r eval = FALSE}
create database stock_db;
use stock_db;

create table price
(
    날짜 date,
    시가 double,
    고가 double,
    저가 double,
    종가 double,
    거래량 double,
    종목코드 varchar(6),
    primary key(날짜, 종목코드)
);
```

![](images/image-510628253.png)

이제 삼성전자 주가를 SQL에 저장해보도록 하자.

```{r eval = FALSE}
library(magrittr)

df = `005930.KS` %>% fortify.zoo() %>%
  select(1:6) %>%
  mutate(종목코드 = '005930') %>%
  set_colnames(c('날짜', '시가', '고가', '저가', '종가', '거래량', '종목코드'))
```

데이터를 받은 후 클렌징 처리를 해준다.

```{r eval = FALSE}
library(DBI)
library(RMySQL)

con = dbConnect(
  drv = MySQL(),
  user = 'root',
  password = '1234', 
  host = '127.0.0.1',
  dbname = 'stock_db'
)

dbSendQuery(con,
  "SET GLOBAL local_infile = TRUE;"
)

dbWriteTable(con, "price", df,
             overwrite = TRUE, row.names = FALSE)
```

1.  R과 SQL을 연결한다.

2.  **local_infile**를 TRUE로 설정한다.

3.  `dbWriteTable()` 함수를 이용해 데이터를 price 테이블에 저장한다.

    ![](images/image-1090061300.png)

SQL을 확인해보면 주가 데이터가 저장되어 있습니다.

# 유료 데이터 벤더 이용하기

미국 시장의 데이터만 필요할 경우 유료 데이터 벤더를 이용하는 것도 좋은 방법입니다. 미국에는 금융 데이터를 API로 제공하는 수많은 업체가 있으며, tiingo의 경우는 월 \$10만 지불하면 미국과 중국의 4만여개 종목에 대한 데이터를 API 형태로 받을 수 있습니다. 이는 상장폐지된 종목을 커버할 뿐만 아니라, API를 이용하므로 크롤링과는 비교할 수 없는 속도로 데이터를 받을 수 있다는 장점이 있습니다. 이 외에도 Alpha Vantage, Quandl, Polygon 등 수많은 데이터 벤더가 존재합니다.

![](images/api/tiingo.png)

tiingo는 무료 계정도 하루 1,000회까지 API 요청을 할 수 있으며, R/파이썬에서 사용할 수 있는 패키지도 있어 쉽게 사용이 가능합니다.

-   API 사용법: <https://api.tiingo.com/documentation/general/overview>
-   R: <https://business-science.github.io/riingo/>
-   파이썬: <https://github.com/hydrosquall/tiingo-python>

![](images/api/token1.png)

## 가입 및 API token 받기

먼저 <https://api.tiingo.com/> 사이트에 접속하여 우측 상단의 \[Sign-up\]을 클릭해 회원가입을 합니다. 그 후 로그인을 한 후 우측 상단에서 본인의 ID를 클릭한 후 \[Account\]를 선택, 좌측 메뉴의 \[API\] 부분에서 \[Token\]을 클릭하면 본인의 API token을 확인할 수 있습니다.

다음으로 발급받은 API Key를 .Renviron 파일에 추가하도록 합니다. 해당 파일에는 여러 패스워드를 추가해 안전하게 관리할 수 있습니다.

```{r eval = FALSE}
file.edit("~/.Renviron")
```

**.Renviron** 파일이 열리면 다음과 같이 입력을 해줍니다.

```{r eval = FALSE}
RIINGO_TOKEN = '발급받은 API'
```

파일을 저장한 후 해당 파일을 적용하기 위해 **R의 Session**을 재시작(ctrl+shift+F10)합니다. 그 후 아래 명령어를 실행하여 API Key를 불러오도록 합니다. (재시작하지 않으면 Key를 불러올 수 없습니다.)

다시 시작한 후 API Key를 불러옵니다.

```{r}
RIINGO_TOKEN = Sys.getenv("RIINGO_TOKEN")
```

## 데이터 다운로드

R에서 tiingo를 사용할 수 있게 해주는 riingo 패키지를 이용해 데이터를 받아보도록 하겠습니다. 먼저 tiingo에서 제공하는 종목은 어떠한 것이 있는지 티커 정보들을 확인해봅니다.

```{r}
# install.packages("riingo")
library(riingo)

tickers = supported_tickers()
tickers
```

ticker(티커), exchange(거래소), assetType(주식 종류), priceCurrency(거래 통화), startDate(시작일), endDate(마감일) 정보가 표시됩니다. 거래소와 통화 별 종목이 몇개가 있는지 확인해보도록 하겠습니다.

```{r}
library(dplyr)

tickers %>% group_by(exchange, priceCurrency) %>% summarize(n = n()) %>%
  arrange(priceCurrency, desc(n))
```

이 중 마이너 거래소나 장외 거래소의 경우 정보를 받아도 우리나라의 증권사를 통해서는 실제로 거래를 할 수 없을수도 있습니다. 따라서 실제 거래가 가능한 거래소 데이터만 필터링한 후 해당 종목들을 받는 것이 효율적입니다.

각 종목의 상세 정보를 확인해보도록 하겠습니다.

```{r}
riingo_meta("AAPL")
```

`riingo_meta()` 함수 내에 티커를 입력하면 티커, 종목명, 사업내역 등 대략적인 정보를 받아올 수 있습니다.

이제 주가를 받아보도록 합시다.

```{r}
riingo_prices("AAPL")
```

`riingo_prices()` 함수 내에 티커를 입력하면 close(종가), high(고가), low(저가), open(시가), volumne(거래량) 및 수정주가와 divCash(현금 배당), splitFactor(주식분할 조정계수)까지 데이터를 받을 수 있습니다.

이번에는 일별 가치지표를 받아보도록 합니다. (무료 계정의 경우 다우존스 30 지수에 포함되는 종목 정보만 제공합니다.)

```{r}
riingo_fundamentals_metrics('AAPL')
```

`riingo_fundamentals_metrics()` 함수 내에 티커를 입력하면 일간 시가총액, 기업가치, PER, PBR, PEG 정보가 받아집니다.

마지막으로 재무제표를 받아보도록 합니다.

```{r}
df = riingo_fundamentals_statements('AAPL')
df
```

티블 내에 다시 데이터프레임이 들어간 형태입니다. 이 중 필요한 데이터만 선택해 묶음을 풀어주면 됩니다.

```{r}
library(tidyr)

df %>%
  select(ticker, date, year, quarter, balanceSheet) %>%
  unnest(cols = c('balanceSheet'))
```
